import { sql } from 'drizzle-orm'
import { integer, real, sqliteTable } from 'drizzle-orm/sqlite-core'

export function createPlayerCareerBattingStats() {
  return [sql`DROP TABLE IF EXISTS players_career_batting_stats`, sql`
    CREATE TABLE players_career_batting_stats (
    "player_id" integer,
    "year" integer,
    "team_id" integer,
    "game_id" integer,
    "league_id" integer,
    "level_id" integer,
    "split_id" integer,
    "position" integer,
    "ab" integer,
    "h" integer,
    "k" integer,
    "pa" integer,
    "pitches_seen" integer,
    "g" integer,
    "gs" integer,
    "d" integer,
    "t" integer,
    "hr" integer,
    "r" integer,
    "rbi" integer,
    "sb" integer,
    "cs" integer,
    "bb" integer,
    "ibb" integer,
    "gdp" integer,
    "sh" integer,
    "sf" integer,
    "hp" integer,
    "ci" integer,
    "wpa" real,
    "stint" integer,
    "ubr" real,
    "war" real)`]
}

export const PlayerCareerBattingStats = sqliteTable('players_career_batting_stats', {
  player_id: integer('player_id').notNull().references(() => PlayersTable.player_id),
  year: integer('year'),
  team_id: integer('team_id'),
  game_id: integer('game_id'),
  league_id: integer('league_id'),
  level_id: integer('level_id'),
  split_id: integer('split_id'),
  position: integer('position'),
  ab: integer('ab'),
  h: integer('h'),
  k: integer('k'),
  pa: integer('pa'),
  pitches_seen: integer('pitches_seen'),
  g: integer('g'),
  gs: integer('gs'),
  d: integer('d'),
  t: integer('t'),
  hr: integer('hr'),
  r: integer('r'),
  rbi: integer('rbi'),
  sb: integer('sb'),
  cs: integer('cs'),
  bb: integer('bb'),
  ibb: integer('ibb'),
  gdp: integer('gdp'),
  sh: integer('sh'),
  sf: integer('sf'),
  hp: integer('hp'),
  ci: integer('ci'),
  wpa: real('wpa'),
  stint: integer('stint'),
  ubr: real('ubr'),
  war: real('war'),
})
export type PlayerCareerBattingStat = typeof PlayerCareerBattingStats.$inferSelect
